# -*- coding: utf-8 -*-
"""ArraysADT_1310EDD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ToJbRJOI9ZNn_Nzj62LpEVlN_A_e7PET
"""

class Array:
    def __init__(self, tam):
        self.__tamanio = tam
        self.__data = [ 0 for x in range(self.__tamanio) ]
    
    def to_string(self):
        info = ""
        for dato in self.__data:
            info = info + str(dato) +"|"

        return  info 
    
    def get_item (self , index ):
          return self.__data[index]
   
    def get_lenght(self):
        return len (self.__data )  

    def set_item (self , dato , index):
        if index >= 0 and index < self.get_lenght():
            self.__data[index]  = dato
        else:
            print("Error:indice fuera de rango ")
    
    def clear (self , dato ):
          self.__data = [  dato for x in range(self.__tamanio) ]




ejemplo = Array(20)
print(ejemplo.to_string() )
print(ejemplo.get_item(2) )
ejemplo.set_item (45 ,22)
print(ejemplo.to_string())
ejemplo.clear ( 4 )
print(ejemplo.to_string() )
print(ejemplo.get_lenght())

lista = [3  * x for x in range (10)]
print(lista)

!cat junio.dat

archivo = open('junio.dat', 'rt', encoding= 'latin-1')
print(archivo.read())

class Trabajador:
    def __init__(self, nt, nom , pat, mat, he, sb, ai):
        self.__numero_trabajador = nt
        self.__nombre = nom
        self.__apellido_paterno = pat
        self.__apellido_materno = mat
        self.__horas_extras = he
        self.__sueldo_base = sb
        self.__anio_ingreso = ai    

    #metodos de acceso
    def set_numero_trabajador(self, nt):
        self.__numero_trabajador = nt
    def get_numero_trabajador(self):
        return self.__numero_trabajador

    def set_nombre(self, nom):
        self.__nonmbre = nom
    def get_nombre(self):
        return self.__nonmbre

    def set_apellido_paterno(self, pat):
        self.__apellido_parterno = pat
    def get_apellido_paterno(self):
        return self.__apellido_parterno
    
    def set_apellido_materno(self, mat):
        self.__apellido_parterno = mat
    def get_apellido_materno(self):
        return self.__apellido_marterno

    def set_horas_extras(self, he):
        self.__horas_extras = he
    def get_horas_extras(self):
        return self.__horas_extras
    
    def set_sueldo_base(self,sb):
        self.__sueldo_base = sb
    def get_sueldo_base(self):
        return self.__sueldo_base
    
    def set_anio_ingreso (self, ai):
        self.__anio_ingreso = ai
    def get_anio_ingreso(self):
        return self.__anio_ingreso
    #metodos de uso general

    def calcular_sueldo_mensual(self):
        anios = 2021 - self.get_anio_ingreso()

        sueldo = self.get_sueldo_base()
        # agregar las horas extra

        sueldo += self.get_horas_extras() * 276.5

        sueldo = sueldo + (sueldo * anios * 0.03)
        return sueldo

    def to_string(self):
        return 'Nombre: ' + self.__nombre + ' Sueldo: ' + str(self.calcular_sueldo_mensual() )

    def calcular_antiguedad(self):
        return 2021 - self.get_anio_ingreso() 

emp = Trabajador(2345, 'CARLOS', 'PEREZ', 'CASTILLO', 1 , 9859, 2017)
print(emp.get_sueldo_base())
print(emp.get_horas_extras())
print(emp.calcular_antiguedad())
print(emp.to_string())

class NominaADT:
    def __init__(self, ruta_archivo):
        #abrir el archvo y desterminar el numero de empeloados ---> num_emp
        archivo = open(ruta_archivo, 'rt', encoding= 'latin-1')
        empleados = archivo.readlines()
        del empleados[0]
        for index in range (len(empleados)):
            empleados[index] = empleados[index].strip().split( ',')
        self.__data = Array(len(empleados))
        cont = 0
        for emp in empleados:
            tmp = Trabajador( int(emp[0]), emp[1] , emp[2], emp[3], int(emp[4]) ,int(emp[5]), int(emp[6]))
            self.__data.set_item(tmp, cont)
            cont += 1 
    
    def buscar_mas_antiguo(self):
        for index in range(self.__data.get_lenght()):
            self.__data.get_item(index).calcular_antiguedad() 
            
            #calculo de mas antuguio
            
            
            
        #iterar y buscara sobre array el de mayor antiguedad
        
    def buscar_menor_antiguead(self ): 
        pass

    def calcular_sueldo(self):
        for index in range (self.__data.get_lenght()):
            print(self.__data.get_item(index).to_string())

ejemplo = NominaADT('junio.dat')
ejemplo.calcular_sueldo()
ejemplo.buscar_mas_antiguo()

